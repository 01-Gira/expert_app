// Mocks generated by Mockito 5.4.6 from annotations
// in search/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i14;
import 'dart:typed_data' as _i16;

import 'package:core/common/failure.dart' as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/src/widgets/navigator.dart' as _i13;
import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;
import 'package:search/data/datasources/search_remote_data_source.dart' as _i9;
import 'package:search/data/models/media_model.dart' as _i10;
import 'package:search/domain/entities/media.dart' as _i8;
import 'package:search/domain/repositories/search_repository.dart' as _i3;
import 'package:search/domain/usecases/search_multi.dart' as _i11;
import 'package:search/presentation/bloc/search/search_bloc.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSearchRepository_1 extends _i1.SmartFake
    implements _i3.SearchRepository {
  _FakeSearchRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSearchState_2 extends _i1.SmartFake implements _i4.SearchState {
  _FakeSearchState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SearchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchRepository extends _i1.Mock implements _i3.SearchRepository {
  MockSearchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Media>>> searchMulti(
    String? query,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchMulti, [query]),
            returnValue:
                _i6.Future<_i2.Either<_i7.Failure, List<_i8.Media>>>.value(
                  _FakeEither_0<_i7.Failure, List<_i8.Media>>(
                    this,
                    Invocation.method(#searchMulti, [query]),
                  ),
                ),
          )
          as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Media>>>);
}

/// A class which mocks [SearchRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchRemoteDataSource extends _i1.Mock
    implements _i9.SearchRemoteDataSource {
  MockSearchRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i10.MediaModel>> searchMulti(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchMulti, [query]),
            returnValue: _i6.Future<List<_i10.MediaModel>>.value(
              <_i10.MediaModel>[],
            ),
          )
          as _i6.Future<List<_i10.MediaModel>>);
}

/// A class which mocks [SearchMulti].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMulti extends _i1.Mock implements _i11.SearchMulti {
  MockSearchMulti() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SearchRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeSearchRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.SearchRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Media>>> execute(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [query]),
            returnValue:
                _i6.Future<_i2.Either<_i7.Failure, List<_i8.Media>>>.value(
                  _FakeEither_0<_i7.Failure, List<_i8.Media>>(
                    this,
                    Invocation.method(#execute, [query]),
                  ),
                ),
          )
          as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Media>>>);
}

/// A class which mocks [SearchBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchBloc extends _i1.Mock implements _i4.SearchBloc {
  MockSearchBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SearchState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeSearchState_2(this, Invocation.getter(#state)),
          )
          as _i4.SearchState);

  @override
  _i6.Stream<_i4.SearchState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i4.SearchState>.empty(),
          )
          as _i6.Stream<_i4.SearchState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i12.EventTransformer<T> debounce<T>(Duration? duration) =>
      (super.noSuchMethod(
            Invocation.method(#debounce, [duration]),
            returnValue: (_i6.Stream<T> events, _i12.EventMapper<T> mapper) =>
                _i6.Stream<T>.empty(),
          )
          as _i12.EventTransformer<T>);

  @override
  void add(_i4.SearchEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i4.SearchEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i4.SearchState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i4.SearchEvent>(
    _i12.EventHandler<E, _i4.SearchState>? handler, {
    _i12.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i12.Transition<_i4.SearchEvent, _i4.SearchState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void onChange(_i12.Change<_i4.SearchState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i13.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
    _i13.Route<dynamic>? route,
    _i13.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didPush, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didPop(_i13.Route<dynamic>? route, _i13.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(#didPop, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i13.Route<dynamic>? route,
    _i13.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didRemove, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didReplace({
    _i13.Route<dynamic>? newRoute,
    _i13.Route<dynamic>? oldRoute,
  }) => super.noSuchMethod(
    Invocation.method(#didReplace, [], {
      #newRoute: newRoute,
      #oldRoute: oldRoute,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeTop(
    _i13.Route<dynamic>? topRoute,
    _i13.Route<dynamic>? previousTopRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didChangeTop, [topRoute, previousTopRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didStartUserGesture(
    _i13.Route<dynamic>? route,
    _i13.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didStartUserGesture, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didStopUserGesture() => super.noSuchMethod(
    Invocation.method(#didStopUserGesture, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i5.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i6.Future<_i5.Response>.value(
              _FakeResponse_3(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i6.Future<_i5.Response>.value(
              _FakeResponse_3(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i6.Future<_i5.Response>.value(
              _FakeResponse_3(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i6.Future<_i5.Response>.value(
              _FakeResponse_3(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i6.Future<_i5.Response>.value(
              _FakeResponse_3(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i6.Future<_i5.Response>.value(
              _FakeResponse_3(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i6.Future<_i5.Response>);

  @override
  _i6.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i6.Future<String>.value(
              _i15.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<_i16.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i6.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
          )
          as _i6.Future<_i16.Uint8List>);

  @override
  _i6.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i6.Future<_i5.StreamedResponse>.value(
              _FakeStreamedResponse_4(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i6.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}
